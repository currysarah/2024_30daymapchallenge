geom_sf(data = d01_work, aes(color = type), size = 0.75) +
scale_color_manual(values = c(demo_color, newcon_color)) +
labs(subtitle = day01_title,
caption = "Data Source: OpenDataPhilly, Licenses & Inspections") +
theme(plot.subtitle = element_textbox_simple(size = 10, lineheight = 1, halign = 0.5, padding = margin(10, 0, 20, 0)),
legend.position = "none",
panel.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank())
ggplot() +
geom_sf(data = map_phl_bound, color = "white", fill = "gray") +
geom_sf(data = d01_work, aes(color = type), size = 0.75) +
scale_color_manual(values = c(demo_color, newcon_color)) +
labs(subtitle = day01_title,
caption = "Data Source: OpenDataPhilly, Licenses & Inspections") +
theme(plot.subtitle = element_textbox_simple(size = 12, lineheight = 1, halign = 0.5, padding = margin(10, 0, 20, 0)),
legend.position = "none",
panel.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank())
ggplot() +
geom_sf(data = map_phl_bound, color = "white", fill = "gray") +
geom_sf(data = d01_work, aes(color = type), size = 0.75) +
scale_color_manual(values = c(demo_color, newcon_color)) +
labs(subtitle = day01_title,
caption = "Data Source: OpenDataPhilly, Licenses & Inspections") +
theme(plot.subtitle = element_textbox_simple(size = 14, lineheight = 1, halign = 0.5, padding = margin(10, 0, 20, 0)),
legend.position = "none",
panel.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank())
ggplot() +
geom_sf(data = map_phl_bound, color = "white", fill = "gray") +
geom_sf(data = d01_work, aes(color = type), size = 0.75) +
scale_color_manual(values = c(demo_color, newcon_color)) +
labs(subtitle = day01_title,
caption = "Data Source: OpenDataPhilly, Licenses & Inspections") +
theme(plot.subtitle = element_textbox_simple(size = 14, lineheight = 1, halign = 0.5, padding = margin(10, 10, 20, 10)),
legend.position = "none",
panel.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank())
ggplot() +
geom_sf(data = map_phl_bound, color = "white", fill = "gray") +
geom_sf(data = d01_work, aes(color = type), size = 0.75) +
scale_color_manual(values = c(demo_color, newcon_color)) +
labs(subtitle = day01_title,
caption = "Data Source: OpenDataPhilly, Licenses & Inspections") +
theme(plot.subtitle = element_textbox_simple(size = 14, lineheight = 1, halign = 0.5, padding = margin(10, 20, 20, 20)),
legend.position = "none",
panel.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank())
ggplot() +
geom_sf(data = map_phl_bound, color = "white", fill = "gray") +
geom_sf(data = d01_work, aes(color = type), size = 0.75) +
scale_color_manual(values = c(demo_color, newcon_color)) +
labs(subtitle = day01_title,
caption = "Data Source: OpenDataPhilly, Licenses & Inspections") +
theme(plot.subtitle = element_textbox_simple(size = 14, lineheight = 1, halign = 0.5, padding = margin(10, 30, 20, 30)),
legend.position = "none",
panel.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank())
ggplot() +
geom_sf(data = map_phl_bound, color = "white", fill = "gray20") +
geom_sf(data = d01_work, aes(color = type), size = 0.75) +
scale_color_manual(values = c(demo_color, newcon_color)) +
labs(subtitle = day01_title,
caption = "Data Source: OpenDataPhilly, Licenses & Inspections") +
theme(plot.subtitle = element_textbox_simple(size = 14, lineheight = 1, halign = 0.5, padding = margin(10, 30, 20, 30)),
legend.position = "none",
panel.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank())
ggplot() +
geom_sf(data = map_phl_bound, color = "white", fill = "gray80") +
geom_sf(data = d01_work, aes(color = type), size = 0.75) +
scale_color_manual(values = c(demo_color, newcon_color)) +
labs(subtitle = day01_title,
caption = "Data Source: OpenDataPhilly, Licenses & Inspections") +
theme(plot.subtitle = element_textbox_simple(size = 14, lineheight = 1, halign = 0.5, padding = margin(10, 30, 20, 30)),
legend.position = "none",
panel.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank())
knitr::opts_chunk$set(echo = TRUE)
#install.packages("devtools")
devtools::install_github("CityOfPhiladelphia/rphl")
library(dplyr)
library(sf)
library(ggplot2)
library(ggtext)
library(glue)
library(lubridate)
library(rphl)
library(tidycensus)
library(tidygeocoder)
library(tidyr)
library(tigris)
options(tigris_use_cache = TRUE)
map_phl_bound <- places(state = "PA", class = "city") %>%
filter(NAME == "Philadelphia") %>%
st_transform("EPSG:2272") %>%
erase_water()
query <- paste("SELECT *", "FROM permits")
d01_data <- get_carto(query = query, format = "csv", base_url = "https://phl.carto.com/api/v2/sql", stringsAsFactors = FALSE)
d01_work <- d01_data %>%
filter(commercialorresidential == "RESIDENTIAL") %>%
filter(permittype == "DEMOLITION" | permittype == "RESIDENTIAL BUILDING")
d01_work <- filter(d01_work, grepl("DEMOLITION|NEW CONSTRUCTION", typeofwork))
d01_work$mostrecentinsp <- ymd_hms(d01_work$mostrecentinsp)
d01_work <- d01_work %>%
filter(mostrecentinsp >= "2024-01-01")
d01_work <- d01_work %>%
distinct(address, .keep_all = TRUE)
d01_work <- d01_work %>%
drop_na(geocode_x, geocode_y)
d01_work <- st_as_sf(d01_work, coords = c("geocode_x", "geocode_y"), crs = 2272)
d01_work$type <- if_else(grepl("DEMOLITION", d01_work$typeofwork), "DEMOLITION", "NEW CONSTRUCTION")
table(d01_work$type)
demo_color <- "#913047"
newcon_color <- "#516954"
day01_title <- "There have been <span style='color: #913047;'>**296 Demolition**</span> and <span style='color: #516954;'>**1,136 New Construction**</span> \n Residential Permits Issued in Philadlephia in 2024"
ggplot() +
geom_sf(data = map_phl_bound, color = "white", fill = "gray80") +
geom_sf(data = d01_work, aes(color = type), size = 0.75) +
scale_color_manual(values = c(demo_color, newcon_color)) +
labs(subtitle = day01_title,
caption = "Data Source: OpenDataPhilly, Licenses & Inspections") +
theme(plot.subtitle = element_textbox_simple(size = 14, lineheight = 1, halign = 0.5, padding = margin(10, 30, 20, 30)),
legend.position = "none",
panel.background = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank())
install.packages("censusapi")
library(censusapi)
data <- url("api.census.gov/data/2023/acs/flows?")
acs_variable_list.2022 <- load_variables(2022, #year
"acs5", #five year ACS estimates
cache = TRUE)
View(acs_variable_list.2022)
View(acs_variable_list.2022)
test <- get_acs(geography = "county",
state = "PA",
year = 2022,
variables = c(moved = "B07204_001"),#median household income
geometry = TRUE,
output = "wide"
)
View(test)
test <- get_acs(geography = "county",
state = "PA",
year = 2022,
variables = c(newcounty = "B07204_009"),#median household income
geometry = TRUE,
output = "wide"
)
View(test)
test <- get_acs(geography = "county",
state = "PA",
year = 2022,
variables = c(fromotherstate = "B07204_011"),#median household income
geometry = TRUE,
output = "wide"
)
View(test)
d02_data <- read.csv(file = "C:/LocalDocuments/GitHub/2024_30daymapchallenge/data/State_to_State_Migration_Table_2023_T13.csv")
View(d02_data)
?read.csv
d02_data <- read.csv(file = "C:/LocalDocuments/GitHub/2024_30daymapchallenge/data/State_to_State_Migration_Table_2023_T13.csv", header = TRUE)
View(d02_data)
d02_data <- read.csv(file = "C:/LocalDocuments/GitHub/2024_30daymapchallenge/data/State_to_State_Migration_Table_2023_T13.csv", header = FALSE)
View(d02_data)
d02_data <- read.csv(file = "C:/LocalDocuments/GitHub/2024_30daymapchallenge/data/State_to_State_Migration_Table_2023_T13.csv", header = TRUE)
test <- states
?states
test <- states()
View(test)
map_states <- states()
View(map_states)
d02_work <- left_join(d02_data, map_states, by = c("Current.residence.in", "NAME"))
d02_work <- left_join(d02_data, map_states, by = c("Current.residence.in", "NAME"))
d02_work <- left_join(d02_data, map_states, by = c("Current.residence.in", "GEOID"))
d02_work <- left_join(d02_data, map_states, by = c("tot.Estimate", "NAME"))
d02_work <- left_join(d02_data, map_states, by = c("Current.residence.in", "NAME"))
# acs_variable_list.2022 <- load_variables(2022, #year
#                                          "acs5", #five year ACS estimates
#                                          cache = TRUE)
#data <- url("api.census.gov/data/2023/acs/flows?")
#fromotherstate = "B07204_011"
map_states <- states()
#download and clean the headers from this website:
#https://www.census.gov/data/tables/time-series/demo/geographic-mobility/state-to-state-migration.html
d02_data <- read.csv(file = "C:/LocalDocuments/GitHub/2024_30daymapchallenge/data/State_to_State_Migration_Table_2023_T13.csv", header = TRUE)
d02_work <- left_join(d02_data, map_states, by = c("Current.residence.in", "NAME"))
# acs_variable_list.2022 <- load_variables(2022, #year
#                                          "acs5", #five year ACS estimates
#                                          cache = TRUE)
#data <- url("api.census.gov/data/2023/acs/flows?")
#fromotherstate = "B07204_011"
map_states <- states()
#download and clean the headers from this website:
#https://www.census.gov/data/tables/time-series/demo/geographic-mobility/state-to-state-migration.html
d02_data <- read.csv(file = "C:/LocalDocuments/GitHub/2024_30daymapchallenge/data/State_to_State_Migration_Table_2023_T13.csv", header = TRUE)
d02_work <- left_join(d02_data, map_states, by = c("Current.residence.in", "NAME"))
d02_work <- left_join(d02_data, map_states, by = c("Current.State", "NAME"))
d02_work <- left_join(d02_data, map_states, by = c("Current.State","NAME"))
d02_work <- left_join(d02_data, map_states, by = c(as.character("Current.State"), as.character("NAME")))
class(d02_data)
class(map_states)
d02_work <- right_join(d02_data, map_states, by = c(as.character("Current.State"), as.character("NAME")))
d02_work <- right_join(map_states, d02_data, by = c(as.character("NAME"), as.character("Current.State")))
d02_work <- left_join(map_states, d02_data, by = c(as.character("NAME"), as.character("Current.State")))
d02_work <- left_join(d02_data, map_states, by = c("NAME", "Current.State"))
d02_work <- left_join(d02_data, map_states, by = c("Current.State", "NAME"))
View(acs_variable_list.2022)
map_states <- get_acs(geography = "state",
variables = "B01003_001",
year = 2022,
geometry = TRUE)
View(map_states)
d02_work <- left_join(d02_data, map_states, by = c("Current.State", "NAME"))
knitr::opts_chunk$set(echo = TRUE)
#install.packages("devtools")
devtools::install_github("CityOfPhiladelphia/rphl")
library(censusapi)
library(dplyr)
library(sf)
library(ggplot2)
library(ggtext)
library(glue)
library(lubridate)
library(rphl)
library(tidycensus)
library(tidygeocoder)
library(tidyr)
library(tigris)
d02_work <- left_join(d02_data, map_states, by = c("Current.State", "NAME"))
d02_work <- map_states %>%
left_join(d02_data, map_states, by = c("Current.State", "NAME"))
d02_work <- map_states %>%
left_join(d02_data, by = c("Current.State", "NAME"))
d02_work <- map_states %>%
left_join(d02_data, by = c("NAME", "Current.State"))
?left_join
d02_work <- map_states %>%
inner_join(d02_data, by = c("NAME", "Current.State"))
d02_work <- map_states %>%
inner_join(d02_data, by = join_by("NAME", "Current.State"))
d02_data <- d02_data %>%
mutate("NAME" = Current.State)
d02_work <- map_states %>%
inner_join(d02_data, by = NAME)
d02_work <- map_states %>%
inner_join(d02_data, by = "NAME")
View(d02_work)
map_states <- states()
# acs_variable_list.2022 <- load_variables(2022, #year
#                                          "acs5", #five year ACS estimates
#                                          cache = TRUE)
#data <- url("api.census.gov/data/2023/acs/flows?")
#fromotherstate = "B07204_011"
map_states <- states()
#download and clean the headers from this website:
#https://www.census.gov/data/tables/time-series/demo/geographic-mobility/state-to-state-migration.html
d02_data <- read.csv(file = "C:/LocalDocuments/GitHub/2024_30daymapchallenge/data/State_to_State_Migration_Table_2023_T13.csv", header = TRUE)
d02_work <- d02_data %>%
mutate("NAME" = Current.State)
d02_work <- map_states %>%
inner_join(d02_work, by = "NAME")
View(d02_data)
View(map_states)
# acs_variable_list.2022 <- load_variables(2022, #year
#                                          "acs5", #five year ACS estimates
#                                          cache = TRUE)
#data <- url("api.census.gov/data/2023/acs/flows?")
#fromotherstate = "B07204_011"
map_states <- states()
#download and clean the headers from this website:
#https://www.census.gov/data/tables/time-series/demo/geographic-mobility/state-to-state-migration.html
d02_data <- read.csv(file = "C:/LocalDocuments/GitHub/2024_30daymapchallenge/data/State_to_State_Migration_Table_2023_T13.csv", header = TRUE)
View(d02_data)
View(map_states)
d02_work <- d02_data %>%
mutate("NAME" = Current.State)
View(d02_work)
d02_work <- map_states %>%
inner_join(d02_work, by = "NAME")
View(d02_work)
# acs_variable_list.2022 <- load_variables(2022, #year
#                                          "acs5", #five year ACS estimates
#                                          cache = TRUE)
#data <- url("api.census.gov/data/2023/acs/flows?")
#fromotherstate = "B07204_011"
map_states <- states()
#download and clean the headers from this website:
#https://www.census.gov/data/tables/time-series/demo/geographic-mobility/state-to-state-migration.html
d02_data <- read.csv(file = "C:/LocalDocuments/GitHub/2024_30daymapchallenge/data/State_to_State_Migration_Table_2023_T13.csv", header = TRUE)
d02_work <- d02_data %>%
mutate("NAME" = Current.State)
d02_work <- map_states %>%
inner_join(d02_work, by = "NAME")
d02_work <- d02_Work %>%
filter(NAME == "Pennsylvania" | NAME == "New Jersey" | NAME == "Delaware")
d02_work <- d02_work %>%
filter(NAME == "Pennsylvania" | NAME == "New Jersey" | NAME == "Delaware")
View(d02_work)
d02_work <- d02_work %>%
filter(NAME == "Pennsylvania" | NAME == "New Jersey" | NAME == "Delaware") %>%
select(-REGION, -DIVISION, -STATEFP, -STATENS, -LSAD, -MTFGC, -FUNCSTAT, -ALAND, -AWATER)
d02_work <- d02_work %>%
filter(NAME == "Pennsylvania" | NAME == "New Jersey" | NAME == "Delaware") %>%
select(-REGION, -DIVISION, -STATEFP, -STATENS, -LSAD, -MTFCC, -FUNCSTAT, -ALAND, -AWATER)
View(d02_work)
dat <- structure(list(Blong = c(-75.58333, -76.08333, -81.08333, -94.25,
-75.41667, -99.41667, -77.41667, -116.08333, -89.58333, -77.58333
), Blat = c(37.58333, 40.58333, 42.75, 41.91667, 38.25, 28.25,
38.91667, 43.58333, 44.25, 38.91667), Elong = c(-65.91667, -75.75,
-80.58333, -95.41667, -73.58333, -89.41667, -77.58333, -116.41667,
-96.41667, -77.41667), Elat = c(45.91667, 40.58333, 42.75, 29.75,
45.58333, 48.25, 38.75, 43.58333, 34.08333, 38.91667), Flyway = structure(c(2L,
2L, 2L, 1L, 2L, 2L, 2L, 3L, 2L, 2L), .Label = c("Central", "Eastern",
"West"), class = "factor")), .Names = c("Blong", "Blat", "Elong",
"Elat", "Flyway"), row.names = c(NA, -10L), class = c("tbl_df",
"tbl", "data.frame"))
library(sf)
library(mapview)
b = dat[, c("Blong", "Blat")]
names(b) = c("long", "lat")
e = dat[, c("Elong", "Elat")]
names(e) = c("long", "lat")
dat$geometry = do.call(
"c",
lapply(seq(nrow(b)), function(i) {
st_sfc(
st_linestring(
as.matrix(
rbind(b[i, ], e[i, ])
)
),
crs = 4326
)
}))
dat_sf = st_as_sf(dat)
mapview(dat_sf, zcol = "Flyway")
View(dat)
View(dat_sf)
View(dat)
ggplot +
geom_sf(dat_sf)
ggplot +
geom_sf(dat_sf, aes())
plot(dat_sf)
plot(dat_sf)
plot(dat)
library(mapdeck)
d02_data_ <- get_flows(geography = "state",
year = 2023,
geography = TRUE)
?get_flows
d02_data_ <- get_flows(geography = "state",
year = 2023,
geometry = TRUE)
d02_data_ <- get_flows(geography = "county",
year = 2023,
geometry = TRUE)
d02_data_ <- get_flows(geography = "metropolitan statistical area",
year = 2023,
geometry = TRUE)
d02_data_ <- get_flows(geography = "county",
state = "PA",
year = 2023,
geometry = TRUE)
d02_data_ <- get_flows(geography = "county",
state = "PA",
year = 2023,
output = "wide",
geometry = TRUE)
d02_data_ <- get_flows(geography = "county",
state = "PA",
year = 2023,
output = "long",
geometry = TRUE)
acs_variable_list.2022 <- load_variables(2022, #year
"acs5", #five year ACS estimates
cache = TRUE)
d02_data_ <- get_flows(geography = "county",
state = "PA",
year = 2023,
output = "long",
geometry = TRUE)
d02_data_ <- get_flows(geography = "county",
state = "PA",
year = 2022,
output = "long",
geometry = TRUE)
View(d02_data_)
View(d02_data_)
d02_data_pa <- get_flows(geography = "county",
state = "PA",
year = 2022,
output = "long",
geometry = TRUE)
View(d02_data_pa)
?summarise
d02_data_pa <- d02_data_pa %>%
group_by(FULL2_NAME) %>%
summarise(totin = (MOVEDIN))
acs_variable_list.2022 <- load_variables(2022, #year
"acs5", #five year ACS estimates
cache = TRUE)
#data <- url("api.census.gov/data/2023/acs/flows?")
#fromotherstate = "B07204_011"
map_states <- states()
#download and clean the headers from this website:
#https://www.census.gov/data/tables/time-series/demo/geographic-mobility/state-to-state-migration.html
d02_data <- read.csv(file = "C:/LocalDocuments/GitHub/2024_30daymapchallenge/data/State_to_State_Migration_Table_2023_T13.csv", header = TRUE)
d02_data_paco <- get_flows(geography = "county",
state = "PA",
year = 2022,
output = "long",
geometry = TRUE)
d02_data_pa <- d02_data_paco %>%
group_by(FULL2_NAME) %>%
summarise(totin = (MOVEDIN))
d02_data_pa <- d02_data_paco %>%
group_by(FULL2_NAME)
d02_data_pa <- d02_data_paco %>%
group_by(FULL2_NAME) %>%
summarise(totin = (MOVEDIN))
d02_data_pa <- d02_data_paco %>%
group_by(FULL2_NAME) %>%
summarise(totin = sum(MOVEDIN))
View(d02_data_pa)
d02_data_pa <- d02_data_paco %>%
group_by(FULL2_NAME) %>%
summarise(totin = sum(MOVEDIN)) %>%
rename("MOVEDFROM" = "FULL2_NAME") %>%
filter(MOVEDFROM != "Pennsylvania")
View(d02_data_pa)
d02_data_pa <- d02_data_paco %>%
group_by(FULL2_NAME) %>%
summarise(totin = sum(MOVEDIN)) %>%
rename("MOVEDFROM" = "FULL2_NAME") %>%
mutate(MOVEDTO = "Pennsylvania") %>%
filter(MOVEDFROM != "Pennsylvania")
View(d02_data_pa)
plot(d02_data_pa)
d02_data_padenjco <- get_flows(geography = "county",
state = c("PA", "DE", "NJ"),
year = 2022,
output = "long",
geometry = TRUE)
View(d02_data_padenjco)
d02_data_padenj <- d02_data_padenjco %>%
group_by(FULL2_NAME) %>%
summarise(totin = sum(MOVEDIN)) %>%
rename("MOVEDFROM" = "FULL2_NAME") %>%
mutate(MOVEDTO = "District") %>%
filter(MOVEDFROM != "Pennsylvania" | MOVEDFROM != "Delaware" | MOVEDFROM != "New Jersey")
View(d02_data_padenj)
d02_data_padenj <- d02_data_padenjco %>%
group_by(FULL2_NAME) %>%
summarise(totin = sum(MOVEDIN)) %>%
rename("MOVEDFROM" = "FULL2_NAME") %>%
mutate(MOVEDTO = "District") %>%
filter(MOVEDFROM != "Pennsylvania" & MOVEDFROM != "Delaware" & MOVEDFROM != "New Jersey")
View(d02_data_padenj)
d02_data <- get_flows(geography = "county",
state = c("PA", "DE", "NJ"),
year = 2022,
output = "long",
geometry = TRUE)
d02_work <- d02_data %>%
group_by(FULL2_NAME) %>%
summarise(totin = sum(MOVEDIN)) %>%
rename("MOVEDFROM" = "FULL2_NAME") %>%
mutate(MOVEDTO = "District") %>%
filter(MOVEDFROM != "Pennsylvania" & MOVEDFROM != "Delaware" & MOVEDFROM != "New Jersey") %>%
st_drop_geometry()
View(d02_work)
map_states_ctr <- states(resolution = "20m") %>%
st_centroid()
View(map_states_ctr)
map_states_ctr <- select(NAME)
map_states_ctr <- map_states_ctr %>%
select(NAME)
View(map_states_ctr)
map_padenj <- map_states %>%
filter(STUSPS == "PA" | STUSPS == "DE" | STUSPS == "NJ") %>%
st_union()
View(map_padenj)
plot(map_padenj)
